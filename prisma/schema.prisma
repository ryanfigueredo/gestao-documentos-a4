// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String?
  email     String     @unique
  cpf       String     @unique
  password  String
  role      String     @default("consultor")
  status    String     @default("aguardando")
  createdAt DateTime   @default(now())
  documents Document[]
  image     String?

  adminId     String?
  admin       User?   @relation("AdminToConsultores", fields: [adminId], references: [id])
  consultores User[]  @relation("AdminToConsultores")

  resetToken       String?   @unique
  resetTokenExpiry DateTime?

  Cliente Cliente[]
  logs    Log[]

  lotesCriados Lote[] @relation("CriadorLotes") // <--- ok
}

model Lote {
  id        String   @id @default(uuid())
  nome      String   @unique
  inicio    DateTime
  fim       DateTime
  status    String   @default("Iniciado")
  createdAt DateTime @default(now())

  criadoPorId String?
  criadoPor   User?   @relation("CriadorLotes", fields: [criadoPorId], references: [id]) // <--- ok

  documentos Document[]
}

model Document {
  id          String          @id @default(uuid())
  tipo        String?
  userId      String
  agrupadorId String?
  clienteId   String?
  loteId      String?
  orgao       Orgao
  status      DocumentoStatus @default(INICIADO)
  fileUrl     String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  valor       Float
  user    User     @relation(fields: [userId], references: [id])
  cliente Cliente? @relation("ClienteDocumentos", fields: [clienteId], references: [id])
  lote    Lote?    @relation(fields: [loteId], references: [id])
}

model DocumentoCliente {
  id        String   @id @default(uuid())
  clienteId String
  cliente   Cliente  @relation(fields: [clienteId], references: [id])
  tipo      String // RG, CNH, Contrato...
  fileUrl   String
  createdAt DateTime @default(now())
}

enum Orgao {
  CENPROT
  SPC
  SERASA
  BOA_VISTA
}

enum DocumentoStatus {
  INICIADO
  EM_ANDAMENTO
  FINALIZADO
}

model Cliente {
  id         String             @id @default(uuid())
  nome       String
  cpfCnpj    String             @unique
  valor      Float
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  documentos DocumentoCliente[]

  documentosRecebidos Document[] @relation("ClienteDocumentos")

}

model Log {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  acao      String
  detalhes  String
  createdAt DateTime @default(now())
}
